#include <stdio.h>
#include<stdlib.h>
int pre[20],in[20];
static int p=0,c=0;
static int pi=0,ii=0;
typedef struct BST
{
    int data;
    struct BST *lchild, *rchild;
} node;

int find(int in[], int val,int il,int ih )
{
    int i;
     for(i=il;i<=ih;i++)
	if(val==in[i])
	return i;
}        

struct node* create(int pre[],int in[], int il, int ih)
{	
	if(il>ih)
        return NULL;
	int 
	int key=find(in,ele,il,ih);
	struct node* t=newnode(pre[pl++]);
	N->data=ele;
	if(il==ih)
	return t;
	N->lchild=create(pre,in,il,key-1);
	N->rchild=create(pre,in,key+1,ih);
	return N;

	
}


	

void parr(int data)
{
    pre[p]=data;
    p++;
}

void iarr(int data)
{
    in[c]=data;
    c++;
}
node *get_node()
{
    node *temp;
    temp = (node *) malloc(sizeof(node));
    temp->lchild = NULL;
    temp->rchild = NULL;
    return temp;
}

void insert(node *root, node *new_node)
{
    if (new_node->data < root->data)
    {
        if (root->lchild == NULL)
            root->lchild = new_node;
        else
            insert(root->lchild, new_node);
    }

    if (new_node->data > root->data)
    {
        if (root->rchild == NULL)
            root->rchild = new_node;
        else
            insert(root->rchild, new_node);
    }
}
void inorder(node *temp)
{
    if (temp != NULL)
    {
        inorder(temp->lchild);
        parr(temp->data);
        inorder(temp->rchild);
    }
}
void preorder(node *temp)
{
    if (temp != NULL)
    {
        iarr(temp->data);
        preorder(temp->lchild);
        preorder(temp->rchild);
    }
}
//---------------------------------------
int main()
{
    int i,n;
    node *new_node, *root, *tmp, *parent;
    node *get_node();
    root = NULL;
    printf("Enter the number of nodes\n");
    scanf("%d",&n);
    for(i=0; i<n; i++)
    {
        new_node = get_node();
        new_node->data=rand() % 1000 + 1;
        printf("%d\n",new_node->data);
        if (root == NULL) /* Tree is not Created */
            root = new_node;
        else
            insert(root, new_node);
    }
//--------------------------------------
    preorder(root);
    inorder(root);
//--------------------------------------
/* printf("Preorder\n");
    for(i=0; i<p; i++)
        printf("%d\n",pre[i]);
    printf("----------------------------\n");
    for(i=0; i<c; i++)
        printf("%d\n",in[i]);-*/
   struct node *root=create(pre,in,0,n-1);
}

