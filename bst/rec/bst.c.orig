#include <stdio.h>
#include<stdlib.h>
int pre[20],in[20];
static int p=0,c=0;
typedef struct BST
{
    int data;
    struct BST *lchild, *rchild;
} node;

void parr(int data)
{
	pre[p]=data;
        p++;
}

void iarr(int data)
{
	in[c]=data;
	c++;
}
node *get_node()
{
    node *temp;
    temp = (node *) malloc(sizeof(node));
    temp->lchild = NULL;
    temp->rchild = NULL;
    return temp;
}

void insert(node *root, node *new_node)
{
    if (new_node->data < root->data)
    {
        if (root->lchild == NULL)
            root->lchild = new_node;
        else
            insert(root->lchild, new_node);
    }

    if (new_node->data > root->data)
    {
        if (root->rchild == NULL)
            root->rchild = new_node;
        else
            insert(root->rchild, new_node);
    }
}
void inorder(node *temp)
{
    if (temp != NULL)
    {
        inorder(temp->lchild);
        parr(temp->data);
        inorder(temp->rchild);
    }
}
void preorder(node *temp)
{
    if (temp != NULL)
    {
	iarr(temp->data);
        preorder(temp->lchild);
        preorder(temp->rchild);
    }
}

int main()
{
    int i,n;
    node *new_node, *root, *tmp, *parent;
    node *get_node();
    root = NULL;
    printf("Enter the number of nodes\n");
    scanf("%d",&n);
    for(i=0; i<n; i++)
    {
        new_node = get_node();
        new_node->data=rand() % 1000 + 1;
        printf("%d\n",new_node->data);
        if (root == NULL) /* Tree is not Created */
            root = new_node;
        else
            insert(root, new_node);
    }
	preorder(root);
	inorder(root);
    for(i=0;i<p;i++)
    printf("%d\n",pre[i]);
	printf("----------------------------\n");
	for(i=0;i<c;i++)
	printf("%d\n",in[i]);
}
